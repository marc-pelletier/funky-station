using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;

namespace Content.Client.SprayPainter.UI;

[GenerateTypedNameReferences]
public sealed partial class SprayPainterWindow : DefaultWindow
{
    [Dependency] private readonly IEntitySystemManager _sysMan = default!;
    private readonly SpriteSystem _spriteSystem;

    public Action<ItemList.ItemListSelectedEventArgs>? OnSpritePicked;
    public Action<ItemList.ItemListSelectedEventArgs>? OnColorPicked;
    public Action<ItemList.ItemListSelectedEventArgs>? OnPrimaryColorPicked;
    public Action<ItemList.ItemListSelectedEventArgs>? OnSecondaryColorPicked;
    public Action<ItemList.ItemListSelectedEventArgs>? OnTertiaryColorPicked;
    public Action<bool>? OnSecondaryEnabledChanged;
    public Action<bool>? OnTertiaryEnabledChanged;

    private Dictionary<string, int> ItemColorIndex = new();
    private Dictionary<string, Color> currentPalette = new();
    private const string colorLocKeyPrefix = "pipe-painter-color-";
    private List<SprayPainterEntry> CurrentEntries = new();

    private readonly SpriteSpecifier _colorEntryIconTexture = new SpriteSpecifier.Rsi(
        new ResPath("Structures/Piping/Atmospherics/pipe.rsi"),
        "pipeStraight");

    public SprayPainterWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);
        _spriteSystem = _sysMan.GetEntitySystem<SpriteSystem>();

        // Bind new event handlers
        PrimaryColorList.OnItemSelected += args => OnPrimaryColorPicked?.Invoke(args);
        SecondaryColorList.OnItemSelected += args => OnSecondaryColorPicked?.Invoke(args);
        TertiaryColorList.OnItemSelected += args => OnTertiaryColorPicked?.Invoke(args);
        SecondaryEnabledCheckBox.OnToggled += args => OnSecondaryEnabledChanged?.Invoke(args.Pressed);
        TertiaryEnabledCheckBox.OnToggled += args => OnTertiaryEnabledChanged?.Invoke(args.Pressed);
    }

    private static string GetColorLocString(string? colorKey)
    {
        if (string.IsNullOrEmpty(colorKey))
            return Loc.GetString("pipe-painter-no-color-selected");
        var locKey = colorLocKeyPrefix + colorKey;

        if (!Loc.TryGetString(locKey, out var locString))
            locString = colorKey;

        return locString;
    }

    public string? IndexToColorKey(int index)
    {
        return (string?) ColorList[index].Metadata;
    }

    public void Populate(List<SprayPainterEntry> entries, int selectedStyle, string? selectedColorKey,
        Dictionary<string, Color> palette, string? primaryColorKey = null, string? secondaryColorKey = null,
        string? tertiaryColorKey = null, bool secondaryEnabled = true, bool tertiaryEnabled = true)
    {
        // Only clear if the entries change. Otherwise the list would "jump" after selecting an item
        if (!CurrentEntries.Equals(entries))
        {
            CurrentEntries = entries;
            SpriteList.Clear();
            foreach (var entry in entries)
            {
                SpriteList.AddItem(entry.Name, entry.Icon);
            }
        }

        // Populate color lists
        if (!currentPalette.Equals(palette))
        {
            currentPalette = palette;
            ItemColorIndex.Clear();
            ColorList.Clear();
            PrimaryColorList.Clear();
            SecondaryColorList.Clear();
            TertiaryColorList.Clear();

            foreach (var color in palette)
            {
                var locString = GetColorLocString(color.Key);
                var item = ColorList.AddItem(locString, _spriteSystem.Frame0(_colorEntryIconTexture));
                item.IconModulate = color.Value;
                item.Metadata = color.Key;

                ItemColorIndex.Add(color.Key, ColorList.IndexOf(item));

                // Populate PrimaryColorList
                var primaryItem = PrimaryColorList.AddItem(locString, _spriteSystem.Frame0(_colorEntryIconTexture));
                primaryItem.IconModulate = color.Value;
                primaryItem.Metadata = color.Key;

                // Populate SecondaryColorList
                var secondaryItem = SecondaryColorList.AddItem(locString, _spriteSystem.Frame0(_colorEntryIconTexture));
                secondaryItem.IconModulate = color.Value;
                secondaryItem.Metadata = color.Key;

                // Populate TertiaryColorList
                var tertiaryItem = TertiaryColorList.AddItem(locString, _spriteSystem.Frame0(_colorEntryIconTexture));
                tertiaryItem.IconModulate = color.Value;
                tertiaryItem.Metadata = color.Key;
            }
        }

        // Select main color
        if (selectedColorKey != null)
        {
            var index = ItemColorIndex[selectedColorKey];
            ColorList.OnItemSelected -= OnColorPicked;
            ColorList[index].Selected = true;
            ColorList.OnItemSelected += OnColorPicked;
        }

        // Select primary color
        if (primaryColorKey != null && ItemColorIndex.ContainsKey(primaryColorKey))
        {
            var index = ItemColorIndex[primaryColorKey];
            PrimaryColorList.OnItemSelected -= OnPrimaryColorPicked;
            PrimaryColorList[index].Selected = true;
            PrimaryColorList.OnItemSelected += OnPrimaryColorPicked;
        }

        // Select secondary color
        if (secondaryColorKey != null && ItemColorIndex.ContainsKey(secondaryColorKey))
        {
            var index = ItemColorIndex[secondaryColorKey];
            SecondaryColorList.OnItemSelected -= OnSecondaryColorPicked;
            SecondaryColorList[index].Selected = true;
            SecondaryColorList.OnItemSelected += OnSecondaryColorPicked;
        }

        // Select tertiary color
        if (tertiaryColorKey != null && ItemColorIndex.ContainsKey(tertiaryColorKey))
        {
            var index = ItemColorIndex[tertiaryColorKey];
            TertiaryColorList.OnItemSelected -= OnTertiaryColorPicked;
            TertiaryColorList[index].Selected = true;
            TertiaryColorList.OnItemSelected += OnTertiaryColorPicked;
        }

        // Update checkboxes
        SecondaryEnabledCheckBox.OnToggled -= args => OnSecondaryEnabledChanged?.Invoke(args.Pressed);
        SecondaryEnabledCheckBox.Pressed = secondaryEnabled;
        SecondaryEnabledCheckBox.OnToggled += args => OnSecondaryEnabledChanged?.Invoke(args.Pressed);

        TertiaryEnabledCheckBox.OnToggled -= args => OnTertiaryEnabledChanged?.Invoke(args.Pressed);
        TertiaryEnabledCheckBox.Pressed = tertiaryEnabled;
        TertiaryEnabledCheckBox.OnToggled += args => OnTertiaryEnabledChanged?.Invoke(args.Pressed);

        // Select sprite
        SpriteList.OnItemSelected -= OnSpritePicked;
        SpriteList[selectedStyle].Selected = true;
        SpriteList.OnItemSelected += OnSpritePicked;
    }
}